(en use-state02)
Moraleja que es súper-mega-importante:
Si quiero que mi app React reaccione a un evento (en este caso el click de un botón), no-no-no tengo que pensar en ejecutar algo que lance la renderización. 
Lo que tengo que hacer es cambiar un estado que afecte a la parte que quiero que se redibuje. De redibujar *se-encarga-React*, lo hace mejor que nosotros ... insistir con que cambia estrictamente lo necesario ... .


(en use-state02)
Para JS, un componente es una función, ¿OK? Atención que se viene una papota.
Cada vez que se cambia un estado, React *vuelve a ejecutar* la función que define el componente. Los valores para los estados los inyecta, sacándolos de un store que maneja él/React. Si cambió el valor de un prop, le va a llegar por parámetro.
Después, cambia lo que está renderizado (técnicamente, en el DOM de la página) de acuerdo al valor de retorno de la función.
Es *de esta forma* que React reacciona, volviendo a ejecutar las funciones con los props actualizados y donde se inyectan los valores de los useState (y otros que iremos viendo).
Puede ser duro de entender. Pero creo que a medida que vayan entendiendo este mecanismo, van a entender en gran parte el funcionamiento de React, lo que ayuda muchísimo para anticipar y resolver problemas, y para sacarle el jugo.
