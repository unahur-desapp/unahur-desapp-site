linkear 
- página a status HTTP
- https://developer.mozilla.org/en-US/docs/Glossary/Falsy
- ejemplo BE

----------------------------------------
Express
-------
Qué es - un Web server.
Y qué es un Web server - lo deberían saber de Redes: atiende pedidos y responde con un paquete, en protocolo HTTP.

Peeero cómo Web, si no lo veo en el browser.

Eso va ligado a qué se espera que responda.
- HTML (junto con JS/CSS) - para el browser
- JSON u otros lenguajes de intercambio - BE para ser consumido por otras apps.
- documentos (onda PDF o imágenes) - también lo puede cubrir un BE.

Un Web server consiste en
- la definición de qué endpoints (verbo + URL) va a atender, y el formato del request para cada uno.
- el código que genera la respuesta para cada endpoint.

Vamos al ejemplo - punto de entrada /lib/app.js.
- mándenle cors.
- lo demás ... esteeee ... lo heredé.


Router - define endpoints
-------------------------
... nos lo provee express, para eso está ...
ver cómo quedan definidas las rutas, esto en /routes/index.js.

primer ejemplo: /saludo
estamos definiendo un endpoint GET /saludo.
Para cada endpoint que definimos, asociamos una función que se va a activar cada vez que el server reciba un pedido para el método y path asociados al endpoint. Esta función es el *controller* del endpoint.
El controller (que puede ser async, esto lo vamos a necesitar para interactuar con una BD) recibe 
dos objetos, a estos objetos los arma Express.
Request y response.
Lo que vamos a hacer casi siempre: res.json.

¿Cómo probamos, es necesario tener un FE andando?
Nop, existen los maravillosos clientes onda Insomnia o Postman.

segundo ejemplo: /respuesta
acá vemos para qué se usa el objeto request.

-------------------------------------
Estos dos endpoints los definimos en conjunto con la definición de la ruta para 
tener un ejemplo que se vea completo.

Por lo general, los controllers se definen en archivos aparte.

En la semilla que les dejamos, tienen las carpetas /routes y /controllers.

(abrir routes/comidas.js al lado, controllers/comida_controller.js abajo)

A su vez, las rutas se suelen definir en (al menos) dos niveles.
- router.use, se engancha otro router (es un composite de Obj2), todos los endpoints que define este segundo router se definen con el prefijo de path que se indica.
- router.get / .post / etc., se pasa un controller, .


ejemplo de comidas, router y controller.
- ¿cuál es la diferencia con una ruta que es resuelta por una consulta a BD?
- ver los endpoints que hay, en particular /carnes/:gramos, acá vemos params.
  Ya vimos query y params, después vamos a ver body.
- creemos una ruta en comidas.
  - de paso cañazo, hot reload gracias a nodemon. Revisemos package.json.
- vemos router y controllers de ciudades.
  - usamos una persistencia trucha.
  - empecemos por el get
    - filtro por país
    - filtro por rango de población
  - get de una ciudad x id como path param
  - header de idioma para i18n (esto es un mega-invento mío)
- agregamos otro router, de escritores y libros.  

Atenti importante API REST, conviene seguirlas
Ver en https://clombardi.github.io/bdsol-capacitacion-desarrollo/etapa-1-index la parte de API REST.




Persistencia - con SQL
----------------------
recordemos lo básico de Sequelize
- modelos con atributos 
  - acá ya enganchamos con migration y seeder, ver los tasks en el Readme del proyecto semilla BE.
- mensajes para crear y ejecutar sentencias SQL
  - findByPk 
  - findAll, se le pueden pasar condiciones
      where { attr: valor }
      operadores
        fecha_inicio_dictado: {
          [Op.lte]: todayDate
        }
      attributes [attr1, attr2, ...]
  - build+save o create

/lib/models/index.js - levanta todos los modelos, es una inicialización necesaria.

Vamos con el get de productos, ponele por proveedor. Por ahora no miremos la relación con compras.
Filtro en BE vs filtro en DB ... el FE no se entera ...
Por qué toJSON.

Vemos el get por ID.

Vamos por el post de productos.


Ahora agregamos compras.
      proveedor: DataTypes.STRING,
      fecha: DataTypes.DATEONLY,
      precio: DataTypes.NUMBER,
      cantidad: DataTypes.NUMBER,


Relaciones
----------
Para qué: permite generar queries con joins.

Miramos el ejemplo: relación bidireccional. 
- Arranquemos con el enganche con compras en la query de productos.
- Pensemos cómo se modelaría en la BD.
- Bueno, Sequelize hace exactamente eso. Y parece que le mete la FK.
  Veamos el archivo que hay que agregar para especificar la relación.

Volvamos al GET de todos los productos, veamos con y sin compras.

Ahora metamos una compra, le tengo que pasar ProductoId. Medio primitivo, pero funciona.


(de acá para abajo no sé qué es)
Cómo manejarlo respecto de la inicialización. Esto lo inventé yo, tal vez no es lo mejor, pero funciona.

Para qué me sirve: veamos los endpoints sobre productos.
- metí un repository, y acá tenemos la cadena completa: router / controller / repository
  - dónde meteríamos p.ej. validación de permisos
  - ¿cómo es que no dice "await" en la función del repository?
  - mejora: pasar el toJson a repository. Ahora sí hace falta el await.
- oh lodash

Unifiquemos estos endpoints: /api/productos?compras=todas o /api/productos?compras=ultima
- mandemos un 400 si compras tiene otro valor




Persistencia - con Mongo
------------------------
Los cuatro pasos: conexión / esquema / modelo / operación.

Algo fácil: alta. En rigor hay varias formas, hasta donde recuerdo las diferencias son sutiles.

Bueno, vamos a buscar.
- toObject
- lean, qué gano, qué pierdo

Filtros
- fáciles: valor exacto, comparaciones de números
- menos fáciles: $regex
- and y or
  - ya que estamos, query params multivalued

Mixed
- este es un rollo de Mongoose, a Mongo no le importa nada
- después en el controller podemos agarrar lo que querramos
  - ¿se puede hacer del lado Mongo? Sí ... si quieren lo vemos juntos

Más filtros
- me meto adentro del objeto
  - con un or
- pero ahora quiero and de or




